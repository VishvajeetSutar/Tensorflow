{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyO1WUU9g0y2Fp6mZ8PN5Lr2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["### Transfer Learning with Tensorflow Part 2:Fine Tuning:"],"metadata":{"id":"QwFQ2hinwTdV"}},{"cell_type":"code","source":["#check if we'are using a GpU\n","!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V5Lm7w4yxlZa","executionInfo":{"status":"ok","timestamp":1709766172659,"user_tz":-330,"elapsed":760,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}},"outputId":"d570dfd0-1893-4da3-f767-164019796338"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["/bin/bash: line 1: nvidia-smi: command not found\n"]}]},{"cell_type":"markdown","source":["#Creating Helper functions\n"," in previous notebooks we've created a bunch of helper functions now we could rewrite them all however this is tedious.\n","\n"," download from  the github"],"metadata":{"id":"ZUbSx6OTx10I"}},{"cell_type":"code","source":["!wget https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/helper_functions.py\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gI3JW2RO0vgi","executionInfo":{"status":"ok","timestamp":1709766173395,"user_tz":-330,"elapsed":17,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}},"outputId":"3f6b0bcf-37d2-401a-fe0a-ed094bc7d732"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2024-03-06 23:02:51--  https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/helper_functions.py\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 10246 (10K) [text/plain]\n","Saving to: ‘helper_functions.py’\n","\n","\rhelper_functions.py   0%[                    ]       0  --.-KB/s               \rhelper_functions.py 100%[===================>]  10.01K  --.-KB/s    in 0s      \n","\n","2024-03-06 23:02:51 (90.3 MB/s) - ‘helper_functions.py’ saved [10246/10246]\n","\n"]}]},{"cell_type":"code","source":["#import helper functions we're going to use in this notebook\n","from helper_functions import create_tensorboard_callback,plot_loss_curves,unzip_data,walk_through_dir"],"metadata":{"id":"3RoBD2yX27kZ","executionInfo":{"status":"ok","timestamp":1709766178813,"user_tz":-330,"elapsed":5429,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["#Lets get some data:\n","this time we are going to use pretrained models from tf.keras.applications"],"metadata":{"id":"w0ZnFZkZ3P0f"}},{"cell_type":"code","source":["#get 10% of tranning data  of 10 classes of food101\n","!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","\n","import zipfile\n","zip_ref=zipfile.ZipFile(\"10_food_classes_10_percent.zip\",\"r\")\n","zip_ref.extractall()\n","zip_ref.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o2aCnuHz418C","executionInfo":{"status":"ok","timestamp":1709766181744,"user_tz":-330,"elapsed":2953,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}},"outputId":"685ab767-d4e5-4e4e-ced8-311436c3f731"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["--2024-03-06 23:02:57--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","Resolving storage.googleapis.com (storage.googleapis.com)... 142.251.2.207, 74.125.137.207, 2607:f8b0:4023:c0d::cf\n","Connecting to storage.googleapis.com (storage.googleapis.com)|142.251.2.207|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 168546183 (161M) [application/zip]\n","Saving to: ‘10_food_classes_10_percent.zip’\n","\n","10_food_classes_10_ 100%[===================>] 160.74M   150MB/s    in 1.1s    \n","\n","2024-03-06 23:02:58 (150 MB/s) - ‘10_food_classes_10_percent.zip’ saved [168546183/168546183]\n","\n"]}]},{"cell_type":"code","source":["walk_through_dir(\"10_food_classes_10_percent\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hrwcogl_7fhL","executionInfo":{"status":"ok","timestamp":1709766181744,"user_tz":-330,"elapsed":13,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}},"outputId":"0d5259b5-3b99-454d-cad7-9514396c5fad"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 2 directories and 0 images in '10_food_classes_10_percent'.\n","There are 10 directories and 0 images in '10_food_classes_10_percent/train'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/sushi'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/chicken_curry'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/ramen'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/fried_rice'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/hamburger'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/chicken_wings'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/ice_cream'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/grilled_salmon'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/steak'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/pizza'.\n","There are 10 directories and 0 images in '10_food_classes_10_percent/test'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/sushi'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/chicken_curry'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/ramen'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/fried_rice'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/hamburger'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/chicken_wings'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/ice_cream'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/grilled_salmon'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/steak'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/pizza'.\n"]}]},{"cell_type":"code","source":["#creating trainning and testing directory paths\n","train_dir=\"10_food_classes_10_percent/train\"\n","test_dir=\"10_food_classes_10_percent/test\""],"metadata":{"id":"F-72oY6E8E_D","executionInfo":{"status":"ok","timestamp":1709766181744,"user_tz":-330,"elapsed":11,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Create data inputs\n","#instead of image data generator we use here the image_dataset_from_directory\n","\n","import tensorflow as tf\n","img_size=(224,224)\n","BATCH_SIZE=32\n","train_data_10_percent=tf.keras.preprocessing.image_dataset_from_directory(directory=train_dir,\n","                                                                          batch_size=32,\n","                                                                          image_size=img_size,\n","                                                                          label_mode=\"categorical\"\n","                                                                          )\n","\n","test_data_10_percent=tf.keras.preprocessing.image_dataset_from_directory(directory=test_dir,\n","                                                                         image_size=img_size,\n","                                                                         label_mode=\"categorical\",\n","                                                                         batch_size=32)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9rk1ZhRB8lRb","executionInfo":{"status":"ok","timestamp":1709766181744,"user_tz":-330,"elapsed":11,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}},"outputId":"a31cb95d-acb5-4828-ef5c-48d1d5904b4d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 750 files belonging to 10 classes.\n","Found 2500 files belonging to 10 classes.\n"]}]},{"cell_type":"code","source":["train_data_10_percent"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tg2Lni8j97dD","executionInfo":{"status":"ok","timestamp":1709766181744,"user_tz":-330,"elapsed":9,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}},"outputId":"2b09caaa-e8ef-4b51-a2f0-8be8863b185c"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<_PrefetchDataset element_spec=(TensorSpec(shape=(None, 224, 224, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None, 10), dtype=tf.float32, name=None))>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#check out the class names of our datset\n","train_data_10_percent.class_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XKzc-5n6_uYY","executionInfo":{"status":"ok","timestamp":1709766181745,"user_tz":-330,"elapsed":9,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}},"outputId":"491c3370-0c66-440b-a0ab-e8602084b8b5"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['chicken_curry',\n"," 'chicken_wings',\n"," 'fried_rice',\n"," 'grilled_salmon',\n"," 'hamburger',\n"," 'ice_cream',\n"," 'pizza',\n"," 'ramen',\n"," 'steak',\n"," 'sushi']"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["## See an example batch of data\n","for images,labels in train_data_10_percent.take(1):\n","  print(images,labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HNnLKQCyDb0a","executionInfo":{"status":"ok","timestamp":1709766182465,"user_tz":-330,"elapsed":728,"user":{"displayName":"Vishvajeet Sutar","userId":"10325499493238005260"}},"outputId":"e28f0a65-7e41-41fd-b05c-024ec1dd32e5"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[[[192.        239.        245.       ]\n","   [192.        239.        247.       ]\n","   [189.78572   236.57143   247.21428  ]\n","   ...\n","   [143.71938   132.71938   102.71938  ]\n","   [142.64285   131.64285   103.64286  ]\n","   [143.22961   132.22961   104.229614 ]]\n","\n","  [[191.        238.        244.       ]\n","   [191.07143   238.07143   246.07143  ]\n","   [190.80103   237.58673   248.22958  ]\n","   ...\n","   [144.94388   131.21426   101.4031   ]\n","   [144.        130.        101.       ]\n","   [144.        130.        101.       ]]\n","\n","  [[191.78572   238.78572   246.35715  ]\n","   [192.7296    239.7296    247.7296   ]\n","   [191.78572   238.57144   249.2143   ]\n","   ...\n","   [144.99998   130.42854    97.64284  ]\n","   [144.78572   130.         99.42857  ]\n","   [144.78572   130.         99.42857  ]]\n","\n","  ...\n","\n","  [[184.56639   182.48985   160.63274  ]\n","   [184.22461   182.01031   161.4389   ]\n","   [174.78078   172.56648   151.99507  ]\n","   ...\n","   [101.61742    71.61742    35.617416 ]\n","   [102.5715     72.5715     36.571503 ]\n","   [103.489555   73.489555   37.489555 ]]\n","\n","  [[189.37753   186.42345   167.9949   ]\n","   [193.14282   190.14282   173.       ]\n","   [189.08672   186.08672   168.9439   ]\n","   ...\n","   [110.06641    80.06641    44.06641  ]\n","   [106.07664    76.07664    40.076633 ]\n","   [105.923355   75.923355   39.92336  ]]\n","\n","  [[187.28577   184.28577   168.82658  ]\n","   [191.07657   188.07657   173.07657  ]\n","   [191.99492   188.35207   175.28062  ]\n","   ...\n","   [108.23471    78.23471    42.234715 ]\n","   [107.50507    77.50507    41.505074 ]\n","   [103.14288    73.14288    37.142883 ]]]\n","\n","\n"," [[[ 83.69898    83.69898    81.69898  ]\n","   [ 86.90306    86.90306    84.90306  ]\n","   [ 86.21939    86.21939    84.21939  ]\n","   ...\n","   [106.5714    102.5714    101.5714   ]\n","   [106.35714   102.35714   101.35714  ]\n","   [106.71429   102.71429   101.71429  ]]\n","\n","  [[ 80.5        80.5        78.5      ]\n","   [ 84.64286    84.64286    82.64286  ]\n","   [ 87.87245    87.87245    85.87245  ]\n","   ...\n","   [107.92857   103.92857   102.92857  ]\n","   [107.93368   103.93368   102.93368  ]\n","   [108.95409   104.95409   103.95409  ]]\n","\n","  [[ 77.63265    77.63265    75.63265  ]\n","   [ 80.28572    80.28572    78.28572  ]\n","   [ 84.47449    84.47449    82.47449  ]\n","   ...\n","   [106.21429   102.21429   101.21429  ]\n","   [105.500015  101.500015  100.500015 ]\n","   [106.78575   102.78575   101.78575  ]]\n","\n","  ...\n","\n","  [[139.        160.        179.       ]\n","   [139.        160.        179.       ]\n","   [138.83163   157.66327   175.16838  ]\n","   ...\n","   [179.04588   205.04588   232.04588  ]\n","   [177.        203.        230.       ]\n","   [178.35718   204.35718   231.35718  ]]\n","\n","  [[139.        160.        180.85718  ]\n","   [139.        160.        179.       ]\n","   [138.27039   158.67351   177.30104  ]\n","   ...\n","   [178.22957   204.22957   231.22957  ]\n","   [177.        203.        230.       ]\n","   [177.42859   203.42859   230.42859  ]]\n","\n","  [[139.64285   160.64285   181.64285  ]\n","   [139.64285   160.64285   181.64285  ]\n","   [139.35204   159.78572   178.7704   ]\n","   ...\n","   [178.58163   204.58163   231.58163  ]\n","   [177.92856   203.92856   230.92856  ]\n","   [176.77039   202.77039   229.77039  ]]]\n","\n","\n"," [[[193.26115   119.26116    56.26116  ]\n","   [193.50366   119.50367    54.503666 ]\n","   [194.83897   124.84806    56.575573 ]\n","   ...\n","   [ 69.493546   40.850754   19.803858 ]\n","   [ 59.714233   32.714233   15.191912 ]\n","   [ 57.81311    30.813108   13.813108 ]]\n","\n","  [[194.27982   120.279816   57.279816 ]\n","   [196.43958   122.439575   59.00654  ]\n","   [195.49634   124.75701    60.61336  ]\n","   ...\n","   [ 70.022675   41.379883   19.594147 ]\n","   [ 62.792187   35.008705   14.441742 ]\n","   [ 56.79897    28.232006   10.448524 ]]\n","\n","  [[192.74554   119.66294    56.357143 ]\n","   [193.55135   122.551346   59.16295  ]\n","   [190.53412   120.05421    59.26913  ]\n","   ...\n","   [ 70.15454    41.24545    17.114403 ]\n","   [ 68.03074    39.41913    16.807522 ]\n","   [ 61.36842    32.75681    10.145204 ]]\n","\n","  ...\n","\n","  [[ 12.          9.          2.       ]\n","   [ 13.          8.          2.       ]\n","   [ 13.          8.          2.       ]\n","   ...\n","   [142.93448   104.93448    67.93448  ]\n","   [144.04959   106.0496     69.355385 ]\n","   [145.        107.         70.305786 ]]\n","\n","  [[ 12.          9.          2.       ]\n","   [ 13.          8.          2.       ]\n","   [ 13.          8.          2.       ]\n","   ...\n","   [143.83212   105.83213    68.73934  ]\n","   [145.27249   107.27249    70.27249  ]\n","   [146.21652   108.21652    71.21652  ]]\n","\n","  [[ 12.          9.          2.       ]\n","   [ 13.          8.          2.       ]\n","   [ 13.          8.          2.       ]\n","   ...\n","   [144.58055   106.58055    67.99092  ]\n","   [146.        108.         69.52228  ]\n","   [147.        109.         72.       ]]]\n","\n","\n"," ...\n","\n","\n"," [[[ 27.142857   14.142857   24.142857 ]\n","   [ 31.82653    18.82653    28.82653  ]\n","   [ 33.77551    17.34694    28.561224 ]\n","   ...\n","   [ 84.612465   75.54611    71.8165   ]\n","   [ 94.69919    85.69919    80.69919  ]\n","   [125.255295  116.255295  109.71446  ]]\n","\n","  [[ 23.10204    11.10204    21.10204  ]\n","   [ 32.57143    19.57143    29.57143  ]\n","   [ 28.030613   11.60204    22.816326 ]\n","   ...\n","   [ 59.58684    50.01537    47.872536 ]\n","   [ 60.70913    50.77547    48.576454 ]\n","   [ 52.12746    43.081543   38.21929  ]]\n","\n","  [[ 27.581633   16.367348   24.79592  ]\n","   [ 32.627552   19.627552   28.841839 ]\n","   [ 30.785713   14.693877   24.954082 ]\n","   ...\n","   [ 59.744915   49.836742   50.36226  ]\n","   [ 58.9591     48.9591     47.744812 ]\n","   [ 53.984844   44.061382   42.336845 ]]\n","\n","  ...\n","\n","  [[ 14.224487   17.224487   24.653076 ]\n","   [  7.51527    10.316282   19.801003 ]\n","   [ 13.760145   15.760146   28.234646 ]\n","   ...\n","   [ 15.377537   12.377537   29.469368 ]\n","   [ 26.484537   23.484537   40.48454  ]\n","   [ 13.948804   10.948804   27.948803 ]]\n","\n","  [[ 10.948922   13.948922   22.948921 ]\n","   [  3.3673258   5.3724265  17.357124 ]\n","   [  2.1274333   4.1274333  17.556005 ]\n","   ...\n","   [ 11.397926    8.397926   25.826454 ]\n","   [ 14.061086   11.061086   28.061085 ]\n","   [  9.26026     6.26026    23.26026  ]]\n","\n","  [[  8.841838   10.841838   22.841837 ]\n","   [ 13.244869   15.244869   28.24487  ]\n","   [  3.6479475   5.6479473  19.076519 ]\n","   ...\n","   [ 16.93364    13.9336405  32.372395 ]\n","   [ 14.449      11.449      28.449    ]\n","   [ 17.056124   15.056124   29.056124 ]]]\n","\n","\n"," [[[ 87.14796    78.57653    85.14796  ]\n","   [ 87.22449    81.581635   85.581635 ]\n","   [ 84.86735    83.51021    86.29592  ]\n","   ...\n","   [ 63.72961    80.489746   82.857124 ]\n","   [ 67.831665   77.979576   84.71429  ]\n","   [ 69.413246   73.867256   82.38258  ]]\n","\n","  [[ 83.47959    81.90816    84.765305 ]\n","   [ 77.63265    77.70408    79.70408  ]\n","   [ 87.22959    86.77041    91.515305 ]\n","   ...\n","   [ 65.65814    79.469345   82.62751  ]\n","   [ 67.98465    82.852      87.91833  ]\n","   [ 63.454155   81.52558    85.52558  ]]\n","\n","  [[ 82.90306    88.47449    87.11735  ]\n","   [ 85.591835   88.948975   91.62245  ]\n","   [ 85.688774   86.35204    91.68878  ]\n","   ...\n","   [ 76.142815   81.066376   87.2347   ]\n","   [ 74.38766    86.07137    91.99993  ]\n","   [ 61.586758   80.08168    84.08168  ]]\n","\n","  ...\n","\n","  [[169.0051    190.64798   191.43369  ]\n","   [153.62248   175.0205    173.53578  ]\n","   [105.83691   122.14309   118.83696  ]\n","   ...\n","   [116.49563   148.64879   148.07729  ]\n","   [150.08675   189.8419    186.57147  ]\n","   [153.18895   198.18895   193.61754  ]]\n","\n","  [[167.71428   193.57146   190.78569  ]\n","   [157.2245    186.01027   182.08168  ]\n","   [139.1789    162.72485   158.75035  ]\n","   ...\n","   [143.17387   180.04657   177.76077  ]\n","   [150.47458   192.3419    190.26543  ]\n","   [155.08151   195.10689   193.96407  ]]\n","\n","  [[163.02553   192.02553   188.02553  ]\n","   [160.07143   186.2857    183.21428  ]\n","   [160.11221   179.8163    178.53569  ]\n","   ...\n","   [150.71436   191.48485   187.3471   ]\n","   [154.47961   193.44383   192.58162  ]\n","   [162.35216   190.14796   193.8929   ]]]\n","\n","\n"," [[[ 64.28571    71.28571    79.28571  ]\n","   [ 72.69388    76.69388    85.69388  ]\n","   [ 90.91327    90.91327   100.484695 ]\n","   ...\n","   [ 84.69972   103.766075  116.06716  ]\n","   [112.61203   134.61203   148.61203  ]\n","   [ 78.41251    99.76965   115.69823  ]]\n","\n","  [[135.38266   142.38266   152.38266  ]\n","   [140.63776   144.63776   155.63776  ]\n","   [143.30103   145.65817   154.87245  ]\n","   ...\n","   [ 47.550922   67.12239    77.79588  ]\n","   [ 51.887917   70.95934    84.74506  ]\n","   [ 56.667778   75.69329    89.61675  ]]\n","\n","  [[149.34184   153.9847    165.55612  ]\n","   [150.21428   154.21428   165.21428  ]\n","   [150.97449   153.05103   164.45409  ]\n","   ...\n","   [ 60.9132     80.03566    87.51015  ]\n","   [ 67.02024    85.448814   95.6631   ]\n","   [ 46.38787    66.25012    77.10209  ]]\n","\n","  ...\n","\n","  [[210.        213.        218.       ]\n","   [211.92857   214.92857   219.92857  ]\n","   [212.42857   215.        220.       ]\n","   ...\n","   [215.40306   228.40306   236.40306  ]\n","   [215.58675   228.58675   236.58675  ]\n","   [213.90813   226.90813   234.90813  ]]\n","\n","  [[210.        213.        218.       ]\n","   [211.92857   214.92857   219.92857  ]\n","   [212.42857   215.        220.       ]\n","   ...\n","   [211.61215   224.61215   232.61215  ]\n","   [218.06635   231.06635   239.06635  ]\n","   [213.23962   226.23962   234.23962  ]]\n","\n","  [[209.64285   214.64285   218.64285  ]\n","   [211.97449   214.97449   219.97449  ]\n","   [213.35204   215.92348   220.92348  ]\n","   ...\n","   [213.86734   226.86734   234.86734  ]\n","   [216.35715   229.35715   237.35715  ]\n","   [214.26013   227.26013   235.26013  ]]]], shape=(32, 224, 224, 3), dtype=float32) tf.Tensor(\n","[[0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n"," [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n"," [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"," [0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n"," [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"," [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"," [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"," [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n"," [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n"," [0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]], shape=(32, 10), dtype=float32)\n"]}]},{"cell_type":"markdown","source":["###Model 0: Building a transfer learning model using the Keras Functional API\n","\n","Alright, our data is tensor-ified, let's build a model.\n","\n","To do so we're going to be using the [`tf.keras.applications`](https://www.tensorflow.org/api_docs/python/tf/keras/applications) module as it contains a series of already trained (on ImageNet) computer vision models as well as the Keras Functional API to construct our model."],"metadata":{"id":"J8pNK-qSE04t"}},{"cell_type":"markdown","source":[],"metadata":{"id":"_KO4_L_sHujj"}},{"cell_type":"code","source":["#1.create base model with tf.keras.applications\n","base_model=tf.keras.applications.EfficientNetB0(include_top=False)\n","\n","## 2. Freeze the base model (so the pre-learned patterns remain)\n","base_model.trainable=False\n","\n","#3.create inputs to our model\n","inputs=tf.keras.layers.Input(shape=(224,224,3),name=\"input_layer\")\n","\n","#4.If you use ResNet50V2 you need to normalize inputs (dont need for efficientnetb0)\n","#x=tf.keras.layers.experimental.preprocessing.Rescaling(1./255)(inputs)\n","\n","#5.pass inputs to the base model\n","x=base_model(inputs)\n","print(f\"shape of the model after passing input through it :{x.shape}\")\n","\n","# 6. Average pool the outputs of the base model (aggregate all the most important information, reduce number of computations)\n","x=tf.keras.layers.GlobalAveragePooling2D(name=\"global_average_pooling_layer\")(x)\n","print(f\"shape after the GlobalaveragePooling: {x.shape}\")\n","\n","#7.create the output activation layer\n","outputs=tf.keras.layers.Dense(10,activation=\"softmax\",name=\"output_layer\")(x)\n","\n","# 8. Combine the inputs with the outputs into a model\n","model_0=tf.keras.Model(inputs,outputs)\n","\n","#9. compile the model\n","model_0.compile(loss=\"categorical_crossentropy\",\n","                optimizer=tf.keras.optimizers.Adam(),\n","                metrics=[\"accuracy\"]\n","                )\n","\n","#10.fit the model\n","history_10_percent = model_0.fit(train_data_10_percent,\n","                                epochs=5,\n","                                steps_per_epoch=len(train_data_10_percent),\n","                                validation_data=test_data_10_percent,\n","                                validation_steps=(0.25*len(test_data_10_percent)),\n","                                callbacks=[create_tensorboard_callback(\"transer_learning\",\"10_percent_feature_extract\")]\n","                            )\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fl8usmv5Hg2t","outputId":"f04f20cc-66c1-4c4f-8d2e-a7fd0b5a9917"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/keras-applications/efficientnetb0_notop.h5\n","16705208/16705208 [==============================] - 0s 0us/step\n","shape of the model after passing input through it :(None, 7, 7, 1280)\n","shape after the GlobalaveragePooling: (None, 1280)\n","Saving TensorBoard log files to: transer_learning/10_percent_feature_extract/20240306-230305\n","Epoch 1/5\n","24/24 [==============================] - 144s 6s/step - loss: 1.8718 - accuracy: 0.4080 - val_loss: 1.3381 - val_accuracy: 0.6969\n","Epoch 2/5\n","24/24 [==============================] - 88s 4s/step - loss: 1.0840 - accuracy: 0.7547 - val_loss: 0.9043 - val_accuracy: 0.8016\n","Epoch 3/5\n","24/24 [==============================] - 87s 4s/step - loss: 0.7984 - accuracy: 0.8173 - val_loss: 0.7255 - val_accuracy: 0.8281\n","Epoch 4/5\n","24/24 [==============================] - ETA: 0s - loss: 0.6318 - accuracy: 0.8573"]}]},{"cell_type":"code","source":["# Check layers in our base model\n","for layer_number,layer in enumerate(base_model.layers):\n","  print(layer_number, layer.name)"],"metadata":{"id":"1x-ZIEHwRbFJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_model.summary()"],"metadata":{"id":"VPxzIAjmVWd0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_0.summary()"],"metadata":{"id":"4R59Utc5Vqx6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#check models trainning loss curves\n","plot_loss_curves(history_10_percent)"],"metadata":{"id":"W_VQiUIzVvbP"},"execution_count":null,"outputs":[]}]}